// Code generated by MockGen. DO NOT EDIT.
// Source: internal/post/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	post "github.com/elizabeth-phillips/blog/internal/post"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method
func (m *MockService) CreatePost(post *post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockServiceMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockService)(nil).CreatePost), post)
}

// FindPostByID mocks base method
func (m *MockService) FindPostByID(id string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostByID", id)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostByID indicates an expected call of FindPostByID
func (mr *MockServiceMockRecorder) FindPostByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostByID", reflect.TypeOf((*MockService)(nil).FindPostByID), id)
}

// FindAllPosts mocks base method
func (m *MockService) FindAllPosts() ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPosts")
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPosts indicates an expected call of FindAllPosts
func (mr *MockServiceMockRecorder) FindAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPosts", reflect.TypeOf((*MockService)(nil).FindAllPosts))
}

// UpdatePost mocks base method
func (m *MockService) UpdatePost(post *post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockServiceMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockService)(nil).UpdatePost), post)
}

// DeletePost mocks base method
func (m *MockService) DeletePost(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockServiceMockRecorder) DeletePost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockService)(nil).DeletePost), id)
}
